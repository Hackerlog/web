/**
 * Flowtype definitions for api
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export var COLLECTION_FORMATS: {
    csv: string,
    ssv: string,
    tsv: string,
    pipes: string
};
/**
 *
 * @export  undefined
 * @interface  FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response >
}
/**
 *
 * @export  undefined
 * @interface  FetchArgs
 */
export interface FetchArgs {
    url: string,
        options: any
}
/**
 *
 * @export  undefined
 * @class  BaseAPI
 */
declare export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;
    configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI): this
}
/**
 *
 * @export  undefined
 * @class  RequiredError
 * @extends  undefined
 */
declare export class RequiredError mixins Error {
    field: string;
    name: "NO PRINT IMPLEMENTED: LiteralType";
    constructor(field: string, msg?: string): this
}
/**
 *
 * @export  undefined
 * @interface  MainAuth
 */
export interface MainAuth {

    /**
     *
     * @type  undefined
     * @memberof  MainAuth
     */
    created_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        expires_at?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        id?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        token?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        updated_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        user?: MainUser,

        /**
         *
         * @type  undefined
         * @memberof  MainAuth
         */
        user_id?: number
}
/**
 *
 * @export  undefined
 * @interface  MainAvailableResponse
 */
export interface MainAvailableResponse {

    /**
     *
     * @type  undefined
     * @memberof  MainAvailableResponse
     */
    is_available?: boolean
}
/**
 *
 * @export  undefined
 * @interface  MainGenericResponse
 */
export interface MainGenericResponse {

    /**
     *
     * @type  undefined
     * @memberof  MainGenericResponse
     */
    error?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainGenericResponse
         */
        success?: boolean
}
/**
 *
 * @export  undefined
 * @interface  MainLoginRequest
 */
export interface MainLoginRequest {

    /**
     *
     * @type  undefined
     * @memberof  MainLoginRequest
     */
    email?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainLoginRequest
         */
        password?: string
}
/**
 *
 * @export  undefined
 * @interface  MainUnit
 */
export interface MainUnit {

    /**
     *
     * @type  undefined
     * @memberof  MainUnit
     */
    created_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        editor_type?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        file_name?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        id?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        loc_deleted?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        loc_written?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        os?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        project_name?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        started_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        stopped_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        updated_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUnit
         */
        user_id?: number
}
/**
 *
 * @export  undefined
 * @interface  MainUser
 */
export interface MainUser {

    /**
     *
     * @type  undefined
     * @memberof  MainUser
     */
    created_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        editor_token?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        email: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        first_name: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        id?: number,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        last_name: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        password: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        profile_image?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        units?: Array<MainUnit>,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        updated_at?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainUser
         */
        username: string
}
/**
 *
 * @export  undefined
 * @interface  MainVersionResponse
 */
export interface MainVersionResponse {

    /**
     *
     * @type  undefined
     * @memberof  MainVersionResponse
     */
    download?: string,

        /**
         *
         * @type  undefined
         * @memberof  MainVersionResponse
         */
        latest?: boolean
}
declare export var AuthApiFetchParamCreator: (
    configuration?: Configuration) => {

    /**
     * Authenticates a user and returns a JWT on successful login
     * @summary  Authenticates a user
     * @param  email, password
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    authenticate(login: MainLoginRequest, options?: any): FetchArgs,

        /**
         * Sends an email to the user with a link to reset their password
         * @summary  Starts a password reset
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        passwordReset(options?: any): FetchArgs,

        /**
         * Allows the user to reset their password with the submitted password
         * @summary  Resets a user's password
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        resetPassword(options?: any): FetchArgs
};
declare export var AuthApiFp: (
    configuration?: Configuration) => {

    /**
     * Authenticates a user and returns a JWT on successful login
     * @summary  Authenticates a user
     * @param  email, password
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    authenticate(
            login: MainLoginRequest,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainAuth>,

        /**
         * Sends an email to the user with a link to reset their password
         * @summary  Starts a password reset
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        passwordReset(
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainGenericResponse>,

        /**
         * Allows the user to reset their password with the submitted password
         * @summary  Resets a user's password
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        resetPassword(
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainGenericResponse >
};
declare export var AuthApiFactory: (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string) => {

    /**
     * Authenticates a user and returns a JWT on successful login
     * @summary  Authenticates a user
     * @param  email, password
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    authenticate(login: MainLoginRequest, options?: any): Promise<MainAuth>,

        /**
         * Sends an email to the user with a link to reset their password
         * @summary  Starts a password reset
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        passwordReset(options?: any): Promise<MainGenericResponse>,

        /**
         * Allows the user to reset their password with the submitted password
         * @summary  Resets a user's password
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        resetPassword(options?: any): Promise<MainGenericResponse >
};
/**
 * AuthApi - object-oriented interface
 * @export  undefined
 * @class  AuthApi
 * @extends  undefined
 */
declare export class AuthApi mixins BaseAPI {

    /**
     * Authenticates a user and returns a JWT on successful login
     * @summary  Authenticates a user
     * @param  email, password
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  AuthApi
     */
    authenticate(login: MainLoginRequest, options?: any): Promise<MainAuth>;

    /**
     * Sends an email to the user with a link to reset their password
     * @summary  Starts a password reset
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  AuthApi
     */
    passwordReset(options?: any): Promise<MainGenericResponse>;

    /**
     * Allows the user to reset their password with the submitted password
     * @summary  Resets a user's password
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  AuthApi
     */
    resetPassword(options?: any): Promise<MainGenericResponse >
}
declare export var CoreApiFetchParamCreator: (
    configuration?: Configuration) => {

    /**
     * This endpoint takes a few parameters and with those parameters, it looks to see if
     * @summary  Returns a link of the latest version of the Core app
     * @param  X-Hackerlog-EditorToken
     * @param  Current core version in client
     * @param  The client OS
     * @param  The client architecture
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    coreVersionGet(
        X_Hackerlog_EditorToken: string,
        currentVersion: string,
        os: string,
        arch: string,
        options?: any): FetchArgs
};
declare export var CoreApiFp: (
    configuration?: Configuration) => {

    /**
     * This endpoint takes a few parameters and with those parameters, it looks to see if
     * @summary  Returns a link of the latest version of the Core app
     * @param  X-Hackerlog-EditorToken
     * @param  Current core version in client
     * @param  The client OS
     * @param  The client architecture
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    coreVersionGet(
        X_Hackerlog_EditorToken: string,
        currentVersion: string,
        os: string,
        arch: string,
        options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainVersionResponse >
};
declare export var CoreApiFactory: (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string) => {

    /**
     * This endpoint takes a few parameters and with those parameters, it looks to see if
     * @summary  Returns a link of the latest version of the Core app
     * @param  X-Hackerlog-EditorToken
     * @param  Current core version in client
     * @param  The client OS
     * @param  The client architecture
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    coreVersionGet(
        X_Hackerlog_EditorToken: string,
        currentVersion: string,
        os: string,
        arch: string,
        options?: any): Promise<MainVersionResponse >
};
/**
 * CoreApi - object-oriented interface
 * @export  undefined
 * @class  CoreApi
 * @extends  undefined
 */
declare export class CoreApi mixins BaseAPI {

    /**
     * This endpoint takes a few parameters and with those parameters, it looks to see if
     * @summary  Returns a link of the latest version of the Core app
     * @param  X-Hackerlog-EditorToken
     * @param  Current core version in client
     * @param  The client OS
     * @param  The client architecture
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  CoreApi
     */
    coreVersionGet(
        X_Hackerlog_EditorToken: string,
        currentVersion: string,
        os: string,
        arch: string,
        options?: any): Promise<MainVersionResponse >
}
declare export var MailingListApiFetchParamCreator: (
    configuration?: Configuration) => {

    /**
     * This adds a user to the mailing list
     * @summary  Adds a user to the mailing list
     * @param  Email address
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addUser(email: any, options?: any): FetchArgs
};
declare export var MailingListApiFp: (
    configuration?: Configuration) => {

    /**
     * This adds a user to the mailing list
     * @summary  Adds a user to the mailing list
     * @param  Email address
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addUser(
        email: any,
        options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainGenericResponse >
};
declare export var MailingListApiFactory: (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string) => {

    /**
     * This adds a user to the mailing list
     * @summary  Adds a user to the mailing list
     * @param  Email address
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addUser(email: any, options?: any): Promise<MainGenericResponse >
};
/**
 * MailingListApi - object-oriented interface
 * @export  undefined
 * @class  MailingListApi
 * @extends  undefined
 */
declare export class MailingListApi mixins BaseAPI {

    /**
     * This adds a user to the mailing list
     * @summary  Adds a user to the mailing list
     * @param  Email address
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  MailingListApi
     */
    addUser(email: any, options?: any): Promise<MainGenericResponse >
}
declare export var UnitsApiFetchParamCreator: (
    configuration?: Configuration) => {

    /**
     * This gets all of the units of work for a specific user. The user is identified by the
     * @summary  Gets units of work for a user
     * @param  X-Hackerlog-EditorToken
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    unitsGet(X_Hackerlog_EditorToken: string, options?: any): FetchArgs
};
declare export var UnitsApiFp: (
    configuration?: Configuration) => {

    /**
     * This gets all of the units of work for a specific user. The user is identified by the
     * @summary  Gets units of work for a user
     * @param  X-Hackerlog-EditorToken
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    unitsGet(
        X_Hackerlog_EditorToken: string,
        options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainUnit[] >
};
declare export var UnitsApiFactory: (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string) => {

    /**
     * This gets all of the units of work for a specific user. The user is identified by the
     * @summary  Gets units of work for a user
     * @param  X-Hackerlog-EditorToken
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    unitsGet(X_Hackerlog_EditorToken: string, options?: any): Promise<MainUnit[] >
};
/**
 * UnitsApi - object-oriented interface
 * @export  undefined
 * @class  UnitsApi
 * @extends  undefined
 */
declare export class UnitsApi mixins BaseAPI {

    /**
     * This gets all of the units of work for a specific user. The user is identified by the
     * @summary  Gets units of work for a user
     * @param  X-Hackerlog-EditorToken
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UnitsApi
     */
    unitsGet(X_Hackerlog_EditorToken: string, options?: any): Promise<MainUnit[] >
}
declare export var UsersApiFetchParamCreator: (
    configuration?: Configuration) => {

    /**
     * Adds a profile image to a user
     * @summary  Add Profile Image
     * @param  The ID of the user
     * @param  The URL of the profile image
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addProfileImage(id: string, image_url: any, options?: any): FetchArgs,

        /**
         * Creates a user with the body params that are passed in
         * @summary  Creates/Registers a user
         * @param  User object: first_name, last_name, email, password, username
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        createUser(user: MainUser, options?: any): FetchArgs,

        /**
         * Finds a user given their ID as a path param
         * @summary  Gets a user by their ID
         * @param  User ID
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        findUser(id: number, options?: any): FetchArgs,

        /**
         * Finds a user given their editor token as a path param
         * @summary  Gets a user by their editor token
         * @param  User&#39;s Editor Token
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        fundUserByEditorToken(editor: any, options?: any): FetchArgs,

        /**
         * Checks if an email is available and responds as such
         * @summary  Checks if an email is available
         * @param  email search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isEmailAvailable(q?: string, options?: any): FetchArgs,

        /**
         * Checks if a username is available and responds as such
         * @summary  Checks if a username is available
         * @param  Username search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isUsernameAvailable(q?: string, options?: any): FetchArgs
};
declare export var UsersApiFp: (
    configuration?: Configuration) => {

    /**
     * Adds a profile image to a user
     * @summary  Add Profile Image
     * @param  The ID of the user
     * @param  The URL of the profile image
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addProfileImage(
            id: string,
            image_url: any,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainGenericResponse>,

        /**
         * Creates a user with the body params that are passed in
         * @summary  Creates/Registers a user
         * @param  User object: first_name, last_name, email, password, username
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        createUser(
            user: MainUser,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainUser>,

        /**
         * Finds a user given their ID as a path param
         * @summary  Gets a user by their ID
         * @param  User ID
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        findUser(
            id: number,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainUser>,

        /**
         * Finds a user given their editor token as a path param
         * @summary  Gets a user by their editor token
         * @param  User&#39;s Editor Token
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        fundUserByEditorToken(
            editor: any,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainUser>,

        /**
         * Checks if an email is available and responds as such
         * @summary  Checks if an email is available
         * @param  email search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isEmailAvailable(
            q?: string,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainAvailableResponse>,

        /**
         * Checks if a username is available and responds as such
         * @summary  Checks if a username is available
         * @param  Username search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isUsernameAvailable(
            q?: string,
            options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MainAvailableResponse >
};
declare export var UsersApiFactory: (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string) => {

    /**
     * Adds a profile image to a user
     * @summary  Add Profile Image
     * @param  The ID of the user
     * @param  The URL of the profile image
     * @param  Override http request option.
     * @throws  {RequiredError}
     */
    addProfileImage(id: string, image_url: any, options?: any): Promise<MainGenericResponse>,

        /**
         * Creates a user with the body params that are passed in
         * @summary  Creates/Registers a user
         * @param  User object: first_name, last_name, email, password, username
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        createUser(user: MainUser, options?: any): Promise<MainUser>,

        /**
         * Finds a user given their ID as a path param
         * @summary  Gets a user by their ID
         * @param  User ID
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        findUser(id: number, options?: any): Promise<MainUser>,

        /**
         * Finds a user given their editor token as a path param
         * @summary  Gets a user by their editor token
         * @param  User&#39;s Editor Token
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        fundUserByEditorToken(editor: any, options?: any): Promise<MainUser>,

        /**
         * Checks if an email is available and responds as such
         * @summary  Checks if an email is available
         * @param  email search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isEmailAvailable(q?: string, options?: any): Promise<MainAvailableResponse>,

        /**
         * Checks if a username is available and responds as such
         * @summary  Checks if a username is available
         * @param  Username search using q as key
         * @param  Override http request option.
         * @throws  {RequiredError}
         */
        isUsernameAvailable(q?: string, options?: any): Promise<MainAvailableResponse >
};
/**
 * UsersApi - object-oriented interface
 * @export  undefined
 * @class  UsersApi
 * @extends  undefined
 */
declare export class UsersApi mixins BaseAPI {

    /**
     * Adds a profile image to a user
     * @summary  Add Profile Image
     * @param  The ID of the user
     * @param  The URL of the profile image
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    addProfileImage(id: string, image_url: any, options?: any): Promise<MainGenericResponse>;

    /**
     * Creates a user with the body params that are passed in
     * @summary  Creates/Registers a user
     * @param  User object: first_name, last_name, email, password, username
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    createUser(user: MainUser, options?: any): Promise<MainUser>;

    /**
     * Finds a user given their ID as a path param
     * @summary  Gets a user by their ID
     * @param  User ID
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    findUser(id: number, options?: any): Promise<MainUser>;

    /**
     * Finds a user given their editor token as a path param
     * @summary  Gets a user by their editor token
     * @param  User&#39;s Editor Token
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    fundUserByEditorToken(editor: any, options?: any): Promise<MainUser>;

    /**
     * Checks if an email is available and responds as such
     * @summary  Checks if an email is available
     * @param  email search using q as key
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    isEmailAvailable(q?: string, options?: any): Promise<MainAvailableResponse>;

    /**
     * Checks if a username is available and responds as such
     * @summary  Checks if a username is available
     * @param  Username search using q as key
     * @param  Override http request option.
     * @throws  {RequiredError}
     * @memberof  UsersApi
     */
    isUsernameAvailable(q?: string, options?: any): Promise<MainAvailableResponse >
}
